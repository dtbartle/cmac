package cmac

import (
	"crypto/aes"
	"crypto/cipher"
	"crypto/des"
)

// test vectors from NIST SP800-38b

var nistmsg = []byte{
	0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
	0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
	0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
	0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10}

type nistcase struct {
	msg []byte
	mac []byte
}

type nisttest struct {
	cipher func([]byte) (cipher.Block, error)
	key    []byte
	c0     []byte
	k1     []byte
	k2     []byte
	cases  []nistcase
}

var nistvectors = []nisttest{
	{
		cipher: aes.NewCipher,
		key:    []byte{0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x9, 0xcf, 0x4f, 0x3c},
		c0:     []byte{0x7d, 0xf7, 0x6b, 0xc, 0x1a, 0xb8, 0x99, 0xb3, 0x3e, 0x42, 0xf0, 0x47, 0xb9, 0x1b, 0x54, 0x6f},
		k1:     []byte{0xfb, 0xee, 0xd6, 0x18, 0x35, 0x71, 0x33, 0x66, 0x7c, 0x85, 0xe0, 0x8f, 0x72, 0x36, 0xa8, 0xde},
		k2:     []byte{0xf7, 0xdd, 0xac, 0x30, 0x6a, 0xe2, 0x66, 0xcc, 0xf9, 0xb, 0xc1, 0x1e, 0xe4, 0x6d, 0x51, 0x3b},
		cases: []nistcase{
			{msg: nistmsg[:0],
				mac: []byte{0xbb, 0x1d, 0x69, 0x29, 0xe9, 0x59, 0x37, 0x28, 0x7f, 0xa3, 0x7d, 0x12, 0x9b, 0x75, 0x67, 0x46}},
			{msg: nistmsg[:16],
				mac: []byte{0x7, 0xa, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44, 0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c}},
			{msg: nistmsg[:40],
				mac: []byte{0xdf, 0xa6, 0x67, 0x47, 0xde, 0x9a, 0xe6, 0x30, 0x30, 0xca, 0x32, 0x61, 0x14, 0x97, 0xc8, 0x27}},
			{msg: nistmsg[:64],
				mac: []byte{0x51, 0xf0, 0xbe, 0xbf, 0x7e, 0x3b, 0x9d, 0x92, 0xfc, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3c, 0xfe}},
		},
	}, {
		cipher: aes.NewCipher,
		key:    []byte{0x8e, 0x73, 0xb0, 0xf7, 0xda, 0xe, 0x64, 0x52, 0xc8, 0x10, 0xf3, 0x2b, 0x80, 0x90, 0x79, 0xe5, 0x62, 0xf8, 0xea, 0xd2, 0x52, 0x2c, 0x6b, 0x7b},
		c0:     []byte{0x22, 0x45, 0x2d, 0x8e, 0x49, 0xa8, 0xa5, 0x93, 0x9f, 0x73, 0x21, 0xce, 0xea, 0x6d, 0x51, 0x4b},
		k1:     []byte{0x44, 0x8a, 0x5b, 0x1c, 0x93, 0x51, 0x4b, 0x27, 0x3e, 0xe6, 0x43, 0x9d, 0xd4, 0xda, 0xa2, 0x96},
		k2:     []byte{0x89, 0x14, 0xb6, 0x39, 0x26, 0xa2, 0x96, 0x4e, 0x7d, 0xcc, 0x87, 0x3b, 0xa9, 0xb5, 0x45, 0x2c},
		cases: []nistcase{
			{msg: nistmsg[:0],
				mac: []byte{0xd1, 0x7d, 0xdf, 0x46, 0xad, 0xaa, 0xcd, 0xe5, 0x31, 0xca, 0xc4, 0x83, 0xde, 0x7a, 0x93, 0x67}},
			{msg: nistmsg[:16],
				mac: []byte{0x9e, 0x99, 0xa7, 0xbf, 0x31, 0xe7, 0x10, 0x90, 0x6, 0x62, 0xf6, 0x5e, 0x61, 0x7c, 0x51, 0x84}},
			{msg: nistmsg[:40],
				mac: []byte{0x8a, 0x1d, 0xe5, 0xbe, 0x2e, 0xb3, 0x1a, 0xad, 0x8, 0x9a, 0x82, 0xe6, 0xee, 0x90, 0x8b, 0xe}},
			{msg: nistmsg[:64],
				mac: []byte{0xa1, 0xd5, 0xdf, 0xe, 0xed, 0x79, 0xf, 0x79, 0x4d, 0x77, 0x58, 0x96, 0x59, 0xf3, 0x9a, 0x11}},
		},
	}, {
		cipher: aes.NewCipher,
		key:    []byte{0x60, 0x3d, 0xeb, 0x10, 0x15, 0xca, 0x71, 0xbe, 0x2b, 0x73, 0xae, 0xf0, 0x85, 0x7d, 0x77, 0x81, 0x1f, 0x35, 0x2c, 0x7, 0x3b, 0x61, 0x8, 0xd7, 0x2d, 0x98, 0x10, 0xa3, 0x9, 0x14, 0xdf, 0xf4},
		c0:     []byte{0xe5, 0x68, 0xf6, 0x81, 0x94, 0xcf, 0x76, 0xd6, 0x17, 0x4d, 0x4c, 0xc0, 0x43, 0x10, 0xa8, 0x54},
		k1:     []byte{0xca, 0xd1, 0xed, 0x3, 0x29, 0x9e, 0xed, 0xac, 0x2e, 0x9a, 0x99, 0x80, 0x86, 0x21, 0x50, 0x2f},
		k2:     []byte{0x95, 0xa3, 0xda, 0x6, 0x53, 0x3d, 0xdb, 0x58, 0x5d, 0x35, 0x33, 0x1, 0xc, 0x42, 0xa0, 0xd9},
		cases: []nistcase{
			{msg: nistmsg[:0],
				mac: []byte{0x2, 0x89, 0x62, 0xf6, 0x1b, 0x7b, 0xf8, 0x9e, 0xfc, 0x6b, 0x55, 0x1f, 0x46, 0x67, 0xd9, 0x83}},
			{msg: nistmsg[:16],
				mac: []byte{0x28, 0xa7, 0x2, 0x3f, 0x45, 0x2e, 0x8f, 0x82, 0xbd, 0x4b, 0xf2, 0x8d, 0x8c, 0x37, 0xc3, 0x5c}},
			{msg: nistmsg[:40],
				mac: []byte{0xaa, 0xf3, 0xd8, 0xf1, 0xde, 0x56, 0x40, 0xc2, 0x32, 0xf5, 0xb1, 0x69, 0xb9, 0xc9, 0x11, 0xe6}},
			{msg: nistmsg[:64],
				mac: []byte{0xe1, 0x99, 0x21, 0x90, 0x54, 0x9f, 0x6e, 0xd5, 0x69, 0x6a, 0x2c, 0x5, 0x6c, 0x31, 0x54, 0x10}},
		},
	}, {
		cipher: des.NewTripleDESCipher,
		key:    []byte{0x8a, 0xa8, 0x3b, 0xf8, 0xcb, 0xda, 0x10, 0x62, 0xb, 0xc1, 0xbf, 0x19, 0xfb, 0xb6, 0xcd, 0x58, 0xbc, 0x31, 0x3d, 0x4a, 0x37, 0x1c, 0xa8, 0xb5},
		c0:     []byte{0xc8, 0xcc, 0x74, 0xe9, 0x8a, 0x73, 0x29, 0xa2},
		k1:     []byte{0x91, 0x98, 0xe9, 0xd3, 0x14, 0xe6, 0x53, 0x5f},
		k2:     []byte{0x23, 0x31, 0xd3, 0xa6, 0x29, 0xcc, 0xa6, 0xa5},
		cases: []nistcase{
			{msg: nistmsg[:0],
				mac: []byte{0xb7, 0xa6, 0x88, 0xe1, 0x22, 0xff, 0xaf, 0x95}},
			{msg: nistmsg[:8],
				mac: []byte{0x8e, 0x8f, 0x29, 0x31, 0x36, 0x28, 0x37, 0x97}},
			{msg: nistmsg[:20],
				mac: []byte{0x74, 0x3d, 0xdb, 0xe0, 0xce, 0x2d, 0xc2, 0xed}},
			{msg: nistmsg[:32],
				mac: []byte{0x33, 0xe6, 0xb1, 0x9, 0x24, 0x0, 0xea, 0xe5}},
		},
	}, {
		cipher: des.NewTripleDESCipher,
		key:    []byte{0x4c, 0xf1, 0x51, 0x34, 0xa2, 0x85, 0xd, 0xd5, 0x8a, 0x3d, 0x10, 0xba, 0x80, 0x57, 0xd, 0x38, 0x4c, 0xf1, 0x51, 0x34, 0xa2, 0x85, 0xd, 0xd5},
		c0:     []byte{0xc7, 0x67, 0x9b, 0x9f, 0x6b, 0x8d, 0x7d, 0x7a},
		k1:     []byte{0x8e, 0xcf, 0x37, 0x3e, 0xd7, 0x1a, 0xfa, 0xef},
		k2:     []byte{0x1d, 0x9e, 0x6e, 0x7d, 0xae, 0x35, 0xf5, 0xc5},
		cases: []nistcase{
			{msg: nistmsg[:0],
				mac: []byte{0xbd, 0x2e, 0xbf, 0x9a, 0x3b, 0xa0, 0x3, 0x61}},
			{msg: nistmsg[:8],
				mac: []byte{0x4f, 0xf2, 0xab, 0x81, 0x3c, 0x53, 0xce, 0x83}},
			{msg: nistmsg[:20],
				mac: []byte{0x62, 0xdd, 0x1b, 0x47, 0x19, 0x02, 0xbd, 0x4e}},
			{msg: nistmsg[:32],
				mac: []byte{0x31, 0xb1, 0xe4, 0x31, 0xda, 0xbc, 0x4e, 0xb8}},
		},
	},
}
